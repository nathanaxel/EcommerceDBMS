--Employees
CREATE TABLE Employees
(
EID INT PRIMARY KEY NOT NULL IDENTITY(1,1),
Name VARCHAR(50) NOT NULL,
SALARY INT,
CHECK(salary >= 0)
);

--Shops
CREATE TABLE Shops
(
Sname VARCHAR(50) PRIMARY KEY NOT NULL
);

--Orders
CREATE TABLE Orders
(
OID INT PRIMARY KEY NOT NULL IDENTITY(1,1),
DateTime DATETIME NOT NULL,
ShippingAddress VARCHAR(100) NOT NULL,
ShippingCost DECIMAL(18,2) NOT NULL,
UID INT,
FOREIGN KEY (UID) REFERENCES Users(UID) ON DELETE SET DEFAULT ON UPDATE CASCADE,
CHECK(ShippingCost >= 0)
);

--Users
CREATE TABLE Users
(
UID INT PRIMARY KEY NOT NULL IDENTITY(1,1),
UName VARCHAR(50) NOT NULL
);

--Products
CREATE TABLE Products
(
Pname VARCHAR(50) PRIMARY KEY NOT NULL,
Maker VARCHAR(50) NOT NULL,
Category VARCHAR(50) NOT NULL
);

--ProductListings
CREATE TABLE ProductListings
(
SPID INT PRIMARY KEY NOT NULL IDENTITY(1,1),
SPrice DECIMAL(18,2) NOT NULL,
SQuantity INT NOT NULL,
PName VARCHAR(50),
SName VARCHAR(50),
FOREIGN KEY (Pname) REFERENCES Products(Pname) ON DELETE SET DEFAULT ON UPDATE
CASCADE,
FOREIGN KEY (Sname) REFERENCES Shops(Sname) ON DELETE SET DEFAULT ON UPDATE CASCADE,
CHECK(SPrice >= 0),
CHECK(SQuantity >= 0),
UNIQUE(Pname,Sname)
);

--ProductsInOrders
CREATE TABLE ProductsInOrders
(
OPID INT PRIMARY KEY NOT NULL IDENTITY(1,1),
OPrice DECIMAL(18,2) NOT NULL,
OQuantity INT NOT NULL,
DeliveryDate DATETIME NOT NULL,
Status VARCHAR(50),
PName VARCHAR(50),
Sname VARCHAR(50),
OID INT,
FOREIGN KEY (Pname) REFERENCES Products(Pname) ON DELETE SET DEFAULT ON UPDATE
CASCADE,
FOREIGN KEY (Sname) REFERENCES Shops(Sname) ON DELETE SET DEFAULT ON UPDATE CASCADE,
FOREIGN KEY (OID) REFERENCES Orders(OID) ON DELETE SET DEFAULT ON UPDATE CASCADE,
CHECK(OPrice >= 0),
CHECK(OQuantity >= 0),
CHECK(Status = 'Being Processed' or Status = 'Shipped' or Status = 'Delivered' or
Status = 'Returned'),
UNIQUE(OID, Sname, Pname)
);

--Feedback
CREATE TABLE Feedback
(
UID INT NOT NULL,
OPID INT NOT NULL,
Comment VARCHAR(100),
DateTime DATETIME NOT NULL,
Rating INT NOT NULL,
PRIMARY KEY (UID, OPID),
FOREIGN KEY (UID) REFERENCES Users (UID) ON DELETE NO ACTION ON UPDATE NO ACTION,
FOREIGN KEY (OPID) REFERENCES ProductsInOrders(OPID) ON DELETE NO ACTION ON UPDATE NO
ACTION,
CHECK(RATING >= 1 and Rating <= 5)
);

--PriceHistory
CREATE TABLE PriceHistory
(
SPID INT NOT NULL,
StartDate DATETIME NOT NULL,
EndDate DATETIME NOT NULL,
Price DECIMAL(18,2),
PRIMARY KEY(SPID, StartDate),
FOREIGN KEY (SPID) REFERENCES ProductListings(SPID) ON DELETE NO ACTION ON UPDATE
CASCADE,
CHECK(StartDate <= EndDate),
CHECK(Price >= 0)
);

--Complaints
CREATE TABLE Complaints
(
CID INT PRIMARY KEY NOT NULL IDENTITY(1,1),
FilledDateTime DATETIME NOT NULL,
HandledDateTime DATETIME,
Text VARCHAR(50) NOT NULL,
Status VARCHAR(50) NOT NULL,
EID INT,
UID INT,
FOREIGN KEY (EID) REFERENCES Employees(EID) ON DELETE SET NULL ON UPDATE CASCADE,
FOREIGN KEY (UID) REFERENCES Users(UID) ON DELETE SET NULL ON UPDATE CASCADE,
CHECK(FilledDateTime <= HandledDateTime),
CHECK(Status = 'Pending' or Status = 'Being Handled' or Status = 'Addressed')
);

--ComplaintsOnShops
CREATE TABLE ComplaintsOnShops
(
CID INT PRIMARY KEY NOT NULL,
Sname VARCHAR(50) NOT NULL,
FOREIGN KEY (CID) REFERENCES Complaints(CID) ON DELETE NO ACTION ON UPDATE NO ACTION,
FOREIGN KEY (Sname) REFERENCES Shops(Sname) ON DELETE NO ACTION ON UPDATE NO ACTION
);

--ComplaintsOnOrders
CREATE TABLE ComplaintsOnOrders
(
CID INT PRIMARY KEY NOT NULL,
OID INT NOT NULL,
FOREIGN KEY (CID) REFERENCES Complaints(CID) ON DELETE NO ACTION ON UPDATE NO ACTION,
FOREIGN KEY (OID) REFERENCES Orders(OID) ON DELETE NO ACTION ON UPDATE NO ACTION
);